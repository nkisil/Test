# This is a basic workflow to help you get started with Actions

name: CI

env:
 major: 1
 minor: ${{github.run_number}}
 patch: 0
 muleenv: Development4
 muleversion: 4.4.0-20220622
 mulesrv: vmdmulesrv4
 
# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Process version of the tag
        id: version
        uses: ncipollo/semantic-version-action@v1
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps.version.outputs) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump previous tag
        env:
          PREVIOUS_TAG: ${{ steps.version.outputs.previous_tag }}
        run: echo "$PREVIOUS_TAG"

      - name: Maven Cache
        uses: actions/cache@v3.0.11
        with:
          path: /.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: | 
            ${{ runner.os }}-maven-
            
      - name: Setup Java 1.8
        uses: actions/setup-java@v1
        with:
          java-version: '1.8.x'
          
      - name: Add repo credentials
        uses: s4u/maven-settings-action@v2.4.1
        with:
          servers: |
             [{
               "id": "mule-enterprise",
               "username": "${{ secrets.SS_MAVEN_USER }}",
               "password": "${{ secrets.SS_MAVEN_PASS }}"
             }]


      - name: Print effective maven settings   
        run: mvn help:effective-settings
 
 
      - name: Configure Versioning in Pom
        run: |
            sudo apt install xmlstarlet -y
            xmlstarlet ed -L -N pom=http://maven.apache.org/POM/4.0.0 -u "/pom:project/pom:version" -v '${version.major}.${version.minor}.${version.patch}' $GITHUB_WORKSPACE/pom.xml
            
      - name: Build with Maven
        run: mvn clean package --batch-mode -f $GITHUB_WORKSPACE/pom.xml -Dversion.major=1 -Dversion.minor=1 -Dversion.patch=1


      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.1.1
        with:
          name: artifacts
          path: target/*.jar
    
  test:
    # The type of runner that the job will run on
    needs: build
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        
      - name: Maven Cache
        uses: actions/cache@v3.0.11
        with:
          path: /.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: | 
            ${{ runner.os }}-maven-
            
      - name: Setup Java 1.8
        uses: actions/setup-java@v1
        with:
          java-version: '1.8.x'
 
      - name: Configure Versioning in Pom
        run: |
            sudo apt install xmlstarlet -y
            xmlstarlet ed -L -N pom=http://maven.apache.org/POM/4.0.0 -u "/pom:project/pom:version" -v '${version.major}.${version.minor}.${version.patch}' $GITHUB_WORKSPACE/pom.xml
      
      - name: Test
        env: 
          CLIENTID: ${{ secrets.SS_CLIENT_ID }}
          CLIENTSECRET: ${{ secrets.SS_CLIENT_SECRET }}
        run: |         
         echo "mvn clean test" 

  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        
      - name: Maven Cache
        uses: actions/cache@v3.0.11
        with:
          path: /.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: | 
            ${{ runner.os }}-maven-
              
      - name: Download a Build Artifact
        uses: actions/download-artifact@v3.0.1
        with:
          name: artifacts
          
      - name: Configure Maven Deploy Settings
        run: |
            sudo apt install xmlstarlet -y
            xmlstarlet ed -L -N pom=http://maven.apache.org/POM/4.0.0 -u "/pom:project/pom:version" -v '${version.major}.${version.minor}.${version.patch}' $GITHUB_WORKSPACE/pom.xml
            xmlstarlet ed -L -N pom=http://maven.apache.org/POM/4.0.0  -d  "/pom:project/pom:build/pom:plugins/pom:plugin[pom:artifactId='mule-maven-plugin']/pom:configuration/pom:classifier" $GITHUB_WORKSPACE/pom.xml 
            xmlstarlet ed -L -N pom=http://maven.apache.org/POM/4.0.0 -u "/pom:project/pom:build/pom:plugins/pom:plugin[pom:artifactId='mule-maven-plugin']/pom:version" -v '3.7.1' $GITHUB_WORKSPACE/pom.xml
            xmlstarlet ed -L -N pom=http://maven.apache.org/POM/4.0.0 -s "/pom:project/pom:build/pom:plugins/pom:plugin[pom:artifactId='mule-maven-plugin']/pom:configuration" -t elem -n armDeployment -v "" $GITHUB_WORKSPACE/pom.xml
            xmlstarlet ed -L -N pom=http://maven.apache.org/POM/4.0.0 -s "/pom:project/pom:build/pom:plugins/pom:plugin[pom:artifactId='mule-maven-plugin']/pom:configuration/pom:armDeployment" -t elem -n muleVersion -v '${app.runtime}' $GITHUB_WORKSPACE/pom.xml
            xmlstarlet ed -L -N pom=http://maven.apache.org/POM/4.0.0 -s "/pom:project/pom:build/pom:plugins/pom:plugin[pom:artifactId='mule-maven-plugin']/pom:configuration/pom:armDeployment" -t elem -n uri -v "https://anypoint.mulesoft.com" $GITHUB_WORKSPACE/pom.xml 
            xmlstarlet ed -L -N pom=http://maven.apache.org/POM/4.0.0 -s "/pom:project/pom:build/pom:plugins/pom:plugin[pom:artifactId='mule-maven-plugin']/pom:configuration/pom:armDeployment" -t elem -n target -v '${target}' $GITHUB_WORKSPACE/pom.xml
            xmlstarlet ed -L -N pom=http://maven.apache.org/POM/4.0.0 -s "/pom:project/pom:build/pom:plugins/pom:plugin[pom:artifactId='mule-maven-plugin']/pom:configuration/pom:armDeployment" -t elem -n targetType -v '${target.type}' $GITHUB_WORKSPACE/pom.xml 
            xmlstarlet ed -L -N pom=http://maven.apache.org/POM/4.0.0 -s "/pom:project/pom:build/pom:plugins/pom:plugin[pom:artifactId='mule-maven-plugin']/pom:configuration/pom:armDeployment" -t elem -n connectedAppClientId -v '${connectedAppClientId}' $GITHUB_WORKSPACE/pom.xml 
            xmlstarlet ed -L -N pom=http://maven.apache.org/POM/4.0.0 -s "/pom:project/pom:build/pom:plugins/pom:plugin[pom:artifactId='mule-maven-plugin']/pom:configuration/pom:armDeployment" -t elem -n connectedAppClientSecret -v '${connectedAppClientSecret}' $GITHUB_WORKSPACE/pom.xml
            xmlstarlet ed -L -N pom=http://maven.apache.org/POM/4.0.0 -s "/pom:project/pom:build/pom:plugins/pom:plugin[pom:artifactId='mule-maven-plugin']/pom:configuration/pom:armDeployment" -t elem -n connectedAppGrantType -v "client_credentials" $GITHUB_WORKSPACE/pom.xml
            xmlstarlet ed -L -N pom=http://maven.apache.org/POM/4.0.0 -s "/pom:project/pom:build/pom:plugins/pom:plugin[pom:artifactId='mule-maven-plugin']/pom:configuration/pom:armDeployment" -t elem -n environment -v '${environment}' $GITHUB_WORKSPACE/pom.xml 
             
      - name: Deploy to SandBox
        env: 
          CLIENTID: ${{ secrets.SS_CLIENT_ID }}
          CLIENTSECRET: ${{ secrets.SS_CLIENT_SECRET }}
        run: |         
         artifactName=$(ls *.jar | head -1)
         echo "mvn deploy -DmuleDeploy -Dversion.major=1 -Dversion.minor=1 -Dversion.patch=1 -Dmule.artifact=$artifactName -Dtarget.type=server -Dtarget=$mulesrv -Denvironment=$muleenv -Dapp.runtime=$muleversion -DconnectedAppClientId=$CLIENTID -DconnectedAppClientSecret=$CLIENTSECRET -DskipTests=true"
         cat $GITHUB_WORKSPACE/pom.xml
         mvn deploy -DmuleDeploy --batch-mode -f $GITHUB_WORKSPACE/pom.xml -Dversion.major=1 -Dversion.minor=1 -Dversion.patch=1 -Dmule.artifact=$artifactName -Dtarget.type=server -Dtarget=$mulesrv -Denvironment=$muleenv -Dapp.runtime="$muleversion" -DconnectedAppClientId="$CLIENTID" -DconnectedAppClientSecret="$CLIENTSECRET" -DskipTests=true
 
